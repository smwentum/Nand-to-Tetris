// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.

    
      // if (zx == 1) sets x = 0        // 16-bit constant
    // if (nx == 1) sets x = !x       // bitwise not
    Not16(in=x, out=notx);
    Mux4Way16(a = x, b[0..15]= false, c =notx ,d[0..15]= true, sel[1] =nx , sel[0]=zx ,out =x1);



    // if (zy == 1) sets y = 0        // 16-bit constant
    // if (ny == 1) sets y = !y       // bitwise not
    Not16(in=y, out=noty);
    Mux4Way16(a = y, b[0..15]= false, c= noty ,d[0..15]= true, sel[1] = ny, sel[0]=zy, out =y1);


    // if (f == 1)  sets out = x + y  // integer 2's complement addition
    Add16(a =x1, b =y1, out = a1);
    Not16(in = a1, out = a2 );

    // if (f == 0)  sets out = x & y  // bitwise and
    And16(a =x1 ,b = y1, out = b1);
    Not16(in = b1, out = b2 );

    // if (no == 1) sets out = !out   // bitwise not
    //Not(in= out , out = nout);
    

    Mux4Way16(a = b1 , b= a1, c = b2, d = a2 , sel[1] = no, sel[0] = f,out = out,out[0..7]=lowHalf, out[8..15] =highHalf, out[15]=isNeg  );
    Or8Way(in=lowHalf,out =  o1);
    Or8Way(in=highHalf, out = o2);
    Not(in = o1, out = no1);
    Not(in = o2, out = no2);
    And(a = no1, b =no2, out= zr);
    Mux(a = false, b = true, sel=isNeg, out = ng);


}